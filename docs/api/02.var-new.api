1. ES6 变量赋值的新方式
    1.1 基本解构
        var [a, b, c] = [1, 2, 3];
        a // 1
        b // 2
        c // 3
        可以从数组中提取值，按照对应位置，对变量赋值。
        这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。
        
        
    1.2 模式匹配实例
        let [foo, [[bar], baz]] = [1, [[2], 3]];
        console.log(foo); // 1
        console.log(bar); // 2
        console.log(baz); // 3

        let [ , , third] = [1, 2, 3];
        console.log(third); // 3

        let [head, ...tail] = [1, 2, 3, 4];
        console.log(head); // 1
        console.log(tail); // array [2,3,4]
        
    1.3 解构不成功
        返回 undefinded
            let [foo2] = [];
            console.log(foo2);  // undefined
            
    1.4 不完全解构
        var [a, [b], c] = [1, [2, 3], 4];
        a // 1
        b // 2
        c // 4
        var [x, y] = [1, 2, 3]
        x // 1
        y // 2
    
    
    1.5 出错
        //如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《Iterator》一章），那么将会报错。
        let [foo] = 1;
        let [foo] = false;
        let [foo] = NaN;
        let [foo] = undefined;
        let [foo] = null;
        let [foo] = {};
        
    1.6 解构不仅适用于 var , 也适用于 let 和 const
        let [let1, ... ] = array;
        const [const1, ... ] = array;
        // set 结构
        let [x, y, z] = new Set(['a', 'b', 'c']);
        //只要某种数据结构具有Iterator接口，都可以采用数组形式的解构赋值。
        
    1.7 默认值
        1.7.1 解构赋值允许设置默认值
            var [foo = true ] = []
            foo // true
            [x, y = 'b'] = ['a']
            [x, y = 'b'] = ['a', undefined]
            ES6内部使用严格相等运算符（===），判断一个位置是否有值。所以，如果一个数组成员不严格等于undefined，默认值是不会生效的。
            
            var [x = 1] = [undefined];
            x // 1
            var [x = 1] = [null];
            x // null
            上面代码中，如果一个数组成员是null，默认值就不会生效，因为null不严格等于undefined。
            
        1.7.2 对象设置默认值
            // 如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。
            
            function aaa(){
                console.log("aaa");
            }
            let [x1 = aaa()] = [1];
            console.log(x1); // 1 因为x能取到值，所以函数f根本不会执行。

            let x2;
            if( [1][0] === undefined ){
                x2 = aaa();
            }else{
                x2 = [1][0];
            }
            console.log(x2); // 1

            let [x3 = 1, y3 = x3] = [];
            console.log(x3,y3);  // 1, 1
            let [x4 = 1, y4 = x4 ] = [2];
            console.log(x4,y4);
            let [x5 = 1, y5 = x5] = [1, 2];
            console.log(x5,y5);  // 1, 2
            let [x6 = y6, y6 = 1 ] = [];   // ReferenceError 因为 y6 没有声明
            
        
        